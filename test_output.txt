
> tree-sitter-solidity@0.1.0 test
> tree-sitter test

  01_basics:
      1. âœ“ [32mEmpty source file[0m
      2. âœ“ [32mSingle line comment[0m
      3. âœ“ [32mMulti-line comment[0m
      4. âœ“ [32mNested comments (should not parse)[0m
      5. âœ“ [32mSource file with just comments[0m
  02_pragma:
      6. âœ“ [32mSimple pragma directive[0m
      7. âœ“ [32mPragma with exact version[0m
      8. âœ“ [32mPragma with version range[0m
      9. âœ“ [32mPragma with OR operator[0m
     10. âœ“ [32mPragma with quoted version[0m
     11. âœ“ [32mExperimental pragma[0m
     12. âœ“ [32mCustom pragma[0m
  03_imports:
     13. âœ“ [32mSimple import[0m
     14. âœ“ [32mImport with alias[0m
     15. âœ“ [32mImport everything with alias[0m
     16. âœ“ [32mImport specific symbols[0m
     17. âœ“ [32mImport with symbol aliases[0m
     18. âœ“ [32mMixed import with and without aliases[0m
     19. âœ“ [32mImport single symbol[0m
     20. âœ“ [32mImport with trailing comma[0m
  04_contracts:
     21. âœ“ [32mSimple contract[0m
     22. âœ“ [32mAbstract contract[0m
     23. âœ“ [32mContract with single inheritance[0m
     24. âœ“ [32mContract with multiple inheritance[0m
     25. âœ“ [32mContract with inheritance arguments[0m
     26. âœ“ [32mInterface declaration[0m
     27. âœ“ [32mInterface with inheritance[0m
     28. âœ“ [32mLibrary declaration[0m
     29. âœ“ [32mContract with qualified inheritance[0m
  05_state_variables:
     30. âœ“ [32mSimple state variable[0m
     31. âœ“ [32mState variable with initialization[0m
     32. âœ“ [32mConstant state variable[0m
     33. âœ“ [32mImmutable state variable[0m
     34. âœ“ [32mMultiple modifiers state variable[0m
     35. âœ“ [32mTransient storage variable[0m
     36. âœ“ [32mFile-level constant[0m
     37. âœ“ [32mArray state variable[0m
     38. âœ“ [32mMapping state variable[0m
  06_functions:
     39. âœ“ [32mSimple function[0m
     40. âœ“ [32mFunction with parameters[0m
     41. âœ“ [32mFunction with return type[0m
     42. âœ“ [32mFunction with visibility and mutability[0m
     43. âœ“ [32mExternal payable function[0m
     44. âœ“ [32mConstructor[0m
     45. âœ“ [32mConstructor with modifiers[0m
     46. âœ“ [32mFunction with modifier[0m
     47. âœ“ [32mVirtual function[0m
     48. âœ“ [32mOverride function[0m
     49. âœ“ [32mReceive function[0m
     50. âœ“ [32mFallback function[0m
     51. âœ“ [32mVirtual fallback function[0m
     52. âœ“ [32mOverride fallback function[0m
     53. âœ“ [32mOverride function with single parent[0m
     54. âœ“ [32mOverride function with multiple parents[0m
     55. âœ“ [32mOverride function with qualified parent name[0m
  07_statements:
     56. âœ“ [32mExpression statement[0m
     57. âœ“ [32mVariable declaration statement[0m
     58. âœ“ [32mIf statement[0m
     59. âœ“ [32mIf-else statement[0m
     60. âœ“ [32mFor loop[0m
     61. âœ“ [32mWhile loop[0m
     62. âœ“ [32mReturn statement[0m
     63. âœ“ [32mEmit statement[0m
     64. âœ“ [32mTry-catch statement[0m
     65. âœ“ [32mRevert statement[0m
     66. âœ“ [32mBreak and continue[0m
     67. âœ“ [32mUnchecked block[0m
     68. âœ“ [32mDo-while loop[0m
     69. âœ“ [32mMultiple variable declarations[0m
     70. âœ“ [32mAssembly statement[0m
     71. âœ“ [32mAssembly with memory-safe[0m
     72. âœ— [31mAssembly with dollar identifier[0m
     73. âœ“ [32mYul multi-variable declaration[0m
     74. âœ“ [32mYul multi-variable assignment[0m
     75. âœ“ [32mYul multi-variable assignment with three variables[0m
     76. âœ“ [32mYul multi-variable assignment in if statement[0m
     77. âœ“ [32mYul mixed single and multi-variable declarations[0m
  08_expressions:
     78. âœ“ [32mBinary expressions[0m
     79. âœ“ [32mUnary expressions[0m
     80. âœ“ [32mUpdate expressions[0m
     81. âœ“ [32mMember access[0m
     82. âœ“ [32mArray access[0m
     83. âœ“ [32mFunction calls[0m
     84. âœ“ [32mTernary operator[0m
     85. âœ“ [32mType casting[0m
     86. âœ“ [32mLiterals[0m
     87. âœ“ [32mNew expression[0m
     88. âœ“ [32mStruct constructor[0m
     89. âœ“ [32mArray literals[0m
     90. âœ“ [32mPayable and type expressions[0m
     91. âœ“ [32mAddress literals[0m
     92. âœ“ [32mParenthesized expressions[0m
  09_file_level:
     93. âœ“ [32mFile-level function[0m
     94. âœ“ [32mMultiple file-level functions[0m
     95. âœ“ [32mUsing directive with library[0m
     96. âœ“ [32mUsing directive global[0m
     97. âœ“ [32mUsing directive with operators[0m
     98. âœ“ [32mUsing directive with complex operators[0m
     99. âœ“ [32mMixed file-level declarations[0m
  10_advanced_features:
    100. âœ“ [32mFunction calls with options[0m
    101. âœ“ [32mContract creation with options[0m
    102. âœ“ [32mStatic function calls[0m
    103. âœ“ [32mComplex expressions with precedence[0m
    104. âœ“ [32mArray and slice operations[0m
    105. âœ“ [32mNumber literals with units[0m
    106. âœ“ [32mUnicode and hex strings[0m
    107. âœ“ [32mMapping with named parameters[0m
  12_array_types:
    108. âœ“ [32mArray type declarations with user-defined types[0m
    109. âœ“ [32mArray access expressions[0m
    110. âœ“ [32mArray access with member expressions[0m

1 failure:

correct / [32mexpected[0m / [31munexpected[0m

  1. Assembly with dollar identifier:

    (source_file
      (contract_declaration
        (identifier)
        (contract_body
          (function_definition
            (identifier)
            (parameter_list)
            (function_body
              (assembly_statement
                (yul_block
                  (yul_variable_declaration
                    (yul_identifier)
                    (yul_number_literal))
                  (yul_assignment
                    (yul_member_access
                      (yul_identifier)
                      (yul_identifier))
                    (yul_member_access
                      (yul_identifier)
                      (yul_identifier)))
                  (yul_assignment
                    (yul_member_access
                      (yul_identifier)
                      (yul_identifier))
[31m                    (yul_identifier)))))))))[0m
[32m                    (yul_identifier))))))))[0m

