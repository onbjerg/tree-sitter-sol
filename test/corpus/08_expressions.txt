================================================================================
Binary expressions
================================================================================

contract Test {
    function test() {
        x = a + b * c;
        y = d && e || f;
        z = g == h != i;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (binary_expression
                (identifier)
                (binary_expression
                  (identifier)
                  (identifier)))))
          (expression_statement
            (assignment_expression
              (identifier)
              (binary_expression
                (binary_expression
                  (identifier)
                  (identifier))
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (binary_expression
                (binary_expression
                  (identifier)
                  (identifier))
                (identifier)))))))))

================================================================================
Unary expressions
================================================================================

contract Test {
    function test() {
        x = !flag;
        y = -amount;
        z = ~bits;
        delete storage_var;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (unary_expression
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (unary_expression
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (unary_expression
                (identifier))))
          (expression_statement
            (unary_expression
              (identifier))))))))

================================================================================
Update expressions
================================================================================

contract Test {
    function test() {
        x++;
        ++y;
        z--;
        --w;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (update_expression
              (identifier)))
          (expression_statement
            (update_expression
              (identifier)))
          (expression_statement
            (update_expression
              (identifier)))
          (expression_statement
            (update_expression
              (identifier))))))))

================================================================================
Member access
================================================================================

contract Test {
    function test() {
        x = msg.sender;
        y = block.timestamp;
        z = contract.method();
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (member_expression
                (identifier)
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (member_expression
                (identifier)
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (member_expression
                  (identifier)
                  (identifier))
                (call_arguments)))))))))

================================================================================
Array access
================================================================================

contract Test {
    function test() {
        x = arr[0];
        y = matrix[i][j];
        arr[index] = value;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (array_access
                (identifier)
                (number_literal))))
          (expression_statement
            (assignment_expression
              (identifier)
              (array_access
                (array_access
                  (identifier)
                  (identifier))
                (identifier))))
          (expression_statement
            (assignment_expression
              (array_access
                (identifier)
                (identifier))
              (identifier))))))))

================================================================================
Function calls
================================================================================

contract Test {
    function test() {
        x = func();
        y = func(a, b, c);
        z = contract.method{value: 1 ether}(param);
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (identifier)
                (call_arguments))))
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (identifier)
                (call_arguments
                  (identifier)
                  (identifier)
                  (identifier)))))
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (member_expression
                  (identifier)
                  (identifier))
                (call_options
                  (call_option
                    (identifier)
                    (number_literal)))
                (call_arguments
                  (identifier))))))))))

================================================================================
Ternary operator
================================================================================

contract Test {
    function test() {
        x = condition ? trueValue : falseValue;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (ternary_expression
                (identifier)
                (identifier)
                (identifier)))))))))

================================================================================
Type casting
================================================================================

contract Test {
    function test() {
        x = uint256(value);
        y = address(account);
        z = MyContract(addr);
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (identifier)
                (call_arguments
                  (identifier)))))
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (identifier)
                (call_arguments
                  (identifier)))))
          (expression_statement
            (assignment_expression
              (identifier)
              (call_expression
                (identifier)
                (call_arguments
                  (identifier))))))))))

================================================================================
Literals
================================================================================

contract Test {
    function test() {
        bool b = true;
        uint256 n = 42;
        string memory s = "hello";
        bytes32 h = 0x1234;
        address a = 0x742d35Cc6634C0532925a3b8D5c4Bd9e;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (identifier))
            (boolean_literal))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (identifier))
            (number_literal))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (storage_location)
              (identifier))
            (string_literal))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (identifier))
            (hex_literal))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (identifier))
            (hex_literal)))))))

================================================================================
New expression
================================================================================

contract Test {
    function test() {
        MyContract c = new MyContract();
        MyContract c2 = new MyContract{salt: salt}(param);
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (user_defined_type
                  (identifier)))
              (identifier))
            (new_expression
              (type_name
                (user_defined_type
                  (identifier)))
              (call_arguments)))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (user_defined_type
                  (identifier)))
              (identifier))
            (new_expression
              (type_name
                (user_defined_type
                  (identifier)))
              (call_options
                (call_option
                  (identifier)
                  (identifier)))
              (call_arguments
                (identifier)))))))))

================================================================================
Struct constructor
================================================================================

contract Test {
    function test() {
        Point memory p = Point({x: 10, y: 20});
        Point memory p2 = Point(10, 20);
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (user_defined_type
                  (identifier)))
              (storage_location)
              (identifier))
            (struct_expression
              (identifier)
              (struct_field_assignment
                (identifier)
                (number_literal))
              (struct_field_assignment
                (identifier)
                (number_literal))))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (user_defined_type
                  (identifier)))
              (storage_location)
              (identifier))
            (call_expression
              (identifier)
              (call_arguments
                (number_literal)
                (number_literal)))))))))

================================================================================
Array literals
================================================================================

contract Test {
    function test() {
        uint256[] memory arr = [1, 2, 3];
        uint256[3] memory fixed = [uint256(1), 2, 3];
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (array_type
                  (type_name
                    (primitive_type))))
              (storage_location)
              (identifier))
            (array_literal
              (number_literal)
              (number_literal)
              (number_literal)))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (array_type
                  (type_name
                    (primitive_type))
                  (number_literal)))
              (storage_location)
              (identifier))
            (array_literal
              (call_expression
                (identifier)
                (call_arguments
                  (number_literal)))
              (number_literal)
              (number_literal))))))))

================================================================================
Payable and type expressions
================================================================================

contract Test {
    function test() {
        address payable addr = payable(account);
        bytes memory code = type(MyContract).creationCode;
        string memory name = type(MyContract).name;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (identifier))
            (payable_expression
              (call_arguments
                (identifier))))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (storage_location)
              (identifier))
            (member_expression
              (type_expression
                (type_name
                  (user_defined_type
                    (identifier))))
              (identifier)))
          (variable_declaration_statement
            (variable_declaration
              (type_name
                (primitive_type))
              (storage_location)
              (identifier))
            (member_expression
              (type_expression
                (type_name
                  (user_defined_type
                    (identifier))))
              (identifier))))))))

================================================================================
Parenthesized expressions
================================================================================

contract Test {
    function test() {
        x = (a + b) * c;
        y = (condition) ? value1 : value2;
    }
}

---

(source_file
  (contract_declaration
    (identifier)
    (contract_body
      (function_definition
        (identifier)
        (parameter_list)
        (function_body
          (expression_statement
            (assignment_expression
              (identifier)
              (binary_expression
                (parenthesized_expression
                  (binary_expression
                    (identifier)
                    (identifier)))
                (identifier))))
          (expression_statement
            (assignment_expression
              (identifier)
              (ternary_expression
                (parenthesized_expression
                  (identifier))
                (identifier)
                (identifier)))))))))